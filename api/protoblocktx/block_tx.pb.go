//
//Copyright IBM Corp. All Rights Reserved.
//
//SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.29.3
// source: api/protoblocktx/block_tx.proto

package protoblocktx

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Status represents the result of transaction validation.
// Except for NOT_VALIDATED, all statuses are recorded in the ledger.
// Some statuses are also stored in the state database which prevent resubmission of the same transaction ID.
type Status int32

const (
	// Default status. The transaction has not been validated yet.
	Status_NOT_VALIDATED Status = 0
	// The transaction was successfully committed and the state was updated.
	// Stored in the state database.
	Status_COMMITTED Status = 1
	// Rejected because a transaction with the same ID has already been processed.
	// Not stored in the state database as the entry is already occupied.
	Status_REJECTED_DUPLICATE_TX_ID Status = 2
	// Critical abort reasons.
	// Stored in the state database.
	Status_ABORTED_SIGNATURE_INVALID Status = 3 // Signature is invalid according to the namespace policy.
	Status_ABORTED_MVCC_CONFLICT     Status = 4 // Read-write set conflict.
	// Malformed transaction reasons. These are rejected during initial verification and not processed further.
	// Not stored in the state database. Transactions with the same ID can be resubmitted if corrected.
	Status_MALFORMED_UNSUPPORTED_TX_PAYLOAD          Status = 100 // Unsupported transaction payload type.
	Status_MALFORMED_MISSING_SIGNATURE               Status = 101 // Number of signatures does not match the number of namespaces.
	Status_MALFORMED_MISSING_TX_ID                   Status = 102 // Missing transaction ID.
	Status_MALFORMED_DUPLICATE_NAMESPACE             Status = 103 // Duplicate namespace detected.
	Status_MALFORMED_NAMESPACE_ID_INVALID            Status = 104 // Invalid namespace identifier.
	Status_MALFORMED_BLIND_WRITES_NOT_ALLOWED        Status = 105 // Blind writes are not allowed in a namespace transaction.
	Status_MALFORMED_NO_WRITES                       Status = 106 // No write operations in the transaction.
	Status_MALFORMED_EMPTY_KEY                       Status = 107 // Unset key detected.
	Status_MALFORMED_DUPLICATE_KEY_IN_READ_WRITE_SET Status = 108 // Duplicate key in the read-write set.
	Status_MALFORMED_EMPTY_NAMESPACES                Status = 109 // No namespaces provided.
	Status_MALFORMED_NAMESPACE_POLICY_INVALID        Status = 110 // Invalid namespace policy.
	Status_MALFORMED_CONFIG_TX_INVALID               Status = 111 // Invalid configuration transaction.
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0:   "NOT_VALIDATED",
		1:   "COMMITTED",
		2:   "REJECTED_DUPLICATE_TX_ID",
		3:   "ABORTED_SIGNATURE_INVALID",
		4:   "ABORTED_MVCC_CONFLICT",
		100: "MALFORMED_UNSUPPORTED_TX_PAYLOAD",
		101: "MALFORMED_MISSING_SIGNATURE",
		102: "MALFORMED_MISSING_TX_ID",
		103: "MALFORMED_DUPLICATE_NAMESPACE",
		104: "MALFORMED_NAMESPACE_ID_INVALID",
		105: "MALFORMED_BLIND_WRITES_NOT_ALLOWED",
		106: "MALFORMED_NO_WRITES",
		107: "MALFORMED_EMPTY_KEY",
		108: "MALFORMED_DUPLICATE_KEY_IN_READ_WRITE_SET",
		109: "MALFORMED_EMPTY_NAMESPACES",
		110: "MALFORMED_NAMESPACE_POLICY_INVALID",
		111: "MALFORMED_CONFIG_TX_INVALID",
	}
	Status_value = map[string]int32{
		"NOT_VALIDATED":                             0,
		"COMMITTED":                                 1,
		"REJECTED_DUPLICATE_TX_ID":                  2,
		"ABORTED_SIGNATURE_INVALID":                 3,
		"ABORTED_MVCC_CONFLICT":                     4,
		"MALFORMED_UNSUPPORTED_TX_PAYLOAD":          100,
		"MALFORMED_MISSING_SIGNATURE":               101,
		"MALFORMED_MISSING_TX_ID":                   102,
		"MALFORMED_DUPLICATE_NAMESPACE":             103,
		"MALFORMED_NAMESPACE_ID_INVALID":            104,
		"MALFORMED_BLIND_WRITES_NOT_ALLOWED":        105,
		"MALFORMED_NO_WRITES":                       106,
		"MALFORMED_EMPTY_KEY":                       107,
		"MALFORMED_DUPLICATE_KEY_IN_READ_WRITE_SET": 108,
		"MALFORMED_EMPTY_NAMESPACES":                109,
		"MALFORMED_NAMESPACE_POLICY_INVALID":        110,
		"MALFORMED_CONFIG_TX_INVALID":               111,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_api_protoblocktx_block_tx_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_api_protoblocktx_block_tx_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_api_protoblocktx_block_tx_proto_rawDescGZIP(), []int{0}
}

// Represents a transaction in the blockchain.
type Tx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                 // The transaction ID.
	Namespaces []*TxNamespace `protobuf:"bytes,2,rep,name=namespaces,proto3" json:"namespaces,omitempty"` // Namespaces associated with the transaction.
	Signatures [][]byte       `protobuf:"bytes,3,rep,name=signatures,proto3" json:"signatures,omitempty"` // signature per namespace.
}

func (x *Tx) Reset() {
	*x = Tx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protoblocktx_block_tx_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tx) ProtoMessage() {}

func (x *Tx) ProtoReflect() protoreflect.Message {
	mi := &file_api_protoblocktx_block_tx_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tx.ProtoReflect.Descriptor instead.
func (*Tx) Descriptor() ([]byte, []int) {
	return file_api_protoblocktx_block_tx_proto_rawDescGZIP(), []int{0}
}

func (x *Tx) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Tx) GetNamespaces() []*TxNamespace {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

func (x *Tx) GetSignatures() [][]byte {
	if x != nil {
		return x.Signatures
	}
	return nil
}

// Represents a namespace within a transaction.
type TxNamespace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsId        string       `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"ns_id,omitempty"`                      // The namespace ID.
	NsVersion   uint64       `protobuf:"varint,2,opt,name=ns_version,json=nsVersion,proto3" json:"ns_version,omitempty"`      // The version of the namespace.
	ReadsOnly   []*Read      `protobuf:"bytes,3,rep,name=reads_only,json=readsOnly,proto3" json:"reads_only,omitempty"`       // List of read only operations within the namespace.
	ReadWrites  []*ReadWrite `protobuf:"bytes,4,rep,name=read_writes,json=readWrites,proto3" json:"read_writes,omitempty"`    // List of read-write operations within the namespace.
	BlindWrites []*Write     `protobuf:"bytes,5,rep,name=blind_writes,json=blindWrites,proto3" json:"blind_writes,omitempty"` // List of blind write operations within the namespace.
}

func (x *TxNamespace) Reset() {
	*x = TxNamespace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protoblocktx_block_tx_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxNamespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxNamespace) ProtoMessage() {}

func (x *TxNamespace) ProtoReflect() protoreflect.Message {
	mi := &file_api_protoblocktx_block_tx_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxNamespace.ProtoReflect.Descriptor instead.
func (*TxNamespace) Descriptor() ([]byte, []int) {
	return file_api_protoblocktx_block_tx_proto_rawDescGZIP(), []int{1}
}

func (x *TxNamespace) GetNsId() string {
	if x != nil {
		return x.NsId
	}
	return ""
}

func (x *TxNamespace) GetNsVersion() uint64 {
	if x != nil {
		return x.NsVersion
	}
	return 0
}

func (x *TxNamespace) GetReadsOnly() []*Read {
	if x != nil {
		return x.ReadsOnly
	}
	return nil
}

func (x *TxNamespace) GetReadWrites() []*ReadWrite {
	if x != nil {
		return x.ReadWrites
	}
	return nil
}

func (x *TxNamespace) GetBlindWrites() []*Write {
	if x != nil {
		return x.BlindWrites
	}
	return nil
}

// Represents a read operation.
type Read struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     []byte  `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`                // The key being read.
	Version *uint64 `protobuf:"varint,2,opt,name=version,proto3,oneof" json:"version,omitempty"` // The version of the key being read. Nil version means it doesn't exist.
}

func (x *Read) Reset() {
	*x = Read{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protoblocktx_block_tx_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Read) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Read) ProtoMessage() {}

func (x *Read) ProtoReflect() protoreflect.Message {
	mi := &file_api_protoblocktx_block_tx_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Read.ProtoReflect.Descriptor instead.
func (*Read) Descriptor() ([]byte, []int) {
	return file_api_protoblocktx_block_tx_proto_rawDescGZIP(), []int{2}
}

func (x *Read) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Read) GetVersion() uint64 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

// Represents a read-write operation.
type ReadWrite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     []byte  `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`                // The key involved in the read-write operation.
	Version *uint64 `protobuf:"varint,2,opt,name=version,proto3,oneof" json:"version,omitempty"` // The version of the key being read and written. Nil version means it doesn't exist.
	Value   []byte  `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`            // The value associated with the key being written.
}

func (x *ReadWrite) Reset() {
	*x = ReadWrite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protoblocktx_block_tx_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadWrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadWrite) ProtoMessage() {}

func (x *ReadWrite) ProtoReflect() protoreflect.Message {
	mi := &file_api_protoblocktx_block_tx_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadWrite.ProtoReflect.Descriptor instead.
func (*ReadWrite) Descriptor() ([]byte, []int) {
	return file_api_protoblocktx_block_tx_proto_rawDescGZIP(), []int{3}
}

func (x *ReadWrite) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ReadWrite) GetVersion() uint64 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *ReadWrite) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// Represents a write operation.
type Write struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`     // The key being written.
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"` // The value associated with the key being written.
}

func (x *Write) Reset() {
	*x = Write{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protoblocktx_block_tx_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Write) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Write) ProtoMessage() {}

func (x *Write) ProtoReflect() protoreflect.Message {
	mi := &file_api_protoblocktx_block_tx_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Write.ProtoReflect.Descriptor instead.
func (*Write) Descriptor() ([]byte, []int) {
	return file_api_protoblocktx_block_tx_proto_rawDescGZIP(), []int{4}
}

func (x *Write) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Write) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// Represents a namespace policy.
type NamespacePolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scheme    string `protobuf:"bytes,1,opt,name=scheme,proto3" json:"scheme,omitempty"`                        // The scheme for signature verification.
	PublicKey []byte `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"` // The public key for signature verification.
}

func (x *NamespacePolicy) Reset() {
	*x = NamespacePolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protoblocktx_block_tx_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespacePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespacePolicy) ProtoMessage() {}

func (x *NamespacePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_api_protoblocktx_block_tx_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespacePolicy.ProtoReflect.Descriptor instead.
func (*NamespacePolicy) Descriptor() ([]byte, []int) {
	return file_api_protoblocktx_block_tx_proto_rawDescGZIP(), []int{5}
}

func (x *NamespacePolicy) GetScheme() string {
	if x != nil {
		return x.Scheme
	}
	return ""
}

func (x *NamespacePolicy) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type BlockInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number uint64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *BlockInfo) Reset() {
	*x = BlockInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protoblocktx_block_tx_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockInfo) ProtoMessage() {}

func (x *BlockInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_protoblocktx_block_tx_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockInfo.ProtoReflect.Descriptor instead.
func (*BlockInfo) Descriptor() ([]byte, []int) {
	return file_api_protoblocktx_block_tx_proto_rawDescGZIP(), []int{6}
}

func (x *BlockInfo) GetNumber() uint64 {
	if x != nil {
		return x.Number
	}
	return 0
}

type LastCommittedBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block *BlockInfo `protobuf:"bytes,1,opt,name=block,proto3,oneof" json:"block,omitempty"`
}

func (x *LastCommittedBlock) Reset() {
	*x = LastCommittedBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protoblocktx_block_tx_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastCommittedBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastCommittedBlock) ProtoMessage() {}

func (x *LastCommittedBlock) ProtoReflect() protoreflect.Message {
	mi := &file_api_protoblocktx_block_tx_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastCommittedBlock.ProtoReflect.Descriptor instead.
func (*LastCommittedBlock) Descriptor() ([]byte, []int) {
	return file_api_protoblocktx_block_tx_proto_rawDescGZIP(), []int{7}
}

func (x *LastCommittedBlock) GetBlock() *BlockInfo {
	if x != nil {
		return x.Block
	}
	return nil
}

type QueryStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxIDs []string `protobuf:"bytes,1,rep,name=txIDs,proto3" json:"txIDs,omitempty"`
}

func (x *QueryStatus) Reset() {
	*x = QueryStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protoblocktx_block_tx_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryStatus) ProtoMessage() {}

func (x *QueryStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_protoblocktx_block_tx_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryStatus.ProtoReflect.Descriptor instead.
func (*QueryStatus) Descriptor() ([]byte, []int) {
	return file_api_protoblocktx_block_tx_proto_rawDescGZIP(), []int{8}
}

func (x *QueryStatus) GetTxIDs() []string {
	if x != nil {
		return x.TxIDs
	}
	return nil
}

type TransactionsStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status map[string]*StatusWithHeight `protobuf:"bytes,1,rep,name=status,proto3" json:"status,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TransactionsStatus) Reset() {
	*x = TransactionsStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protoblocktx_block_tx_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionsStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionsStatus) ProtoMessage() {}

func (x *TransactionsStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_protoblocktx_block_tx_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionsStatus.ProtoReflect.Descriptor instead.
func (*TransactionsStatus) Descriptor() ([]byte, []int) {
	return file_api_protoblocktx_block_tx_proto_rawDescGZIP(), []int{9}
}

func (x *TransactionsStatus) GetStatus() map[string]*StatusWithHeight {
	if x != nil {
		return x.Status
	}
	return nil
}

type StatusWithHeight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        Status `protobuf:"varint,1,opt,name=code,proto3,enum=protoblocktx.Status" json:"code,omitempty"`
	BlockNumber uint64 `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	TxNumber    uint32 `protobuf:"varint,3,opt,name=tx_number,json=txNumber,proto3" json:"tx_number,omitempty"`
}

func (x *StatusWithHeight) Reset() {
	*x = StatusWithHeight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protoblocktx_block_tx_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusWithHeight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusWithHeight) ProtoMessage() {}

func (x *StatusWithHeight) ProtoReflect() protoreflect.Message {
	mi := &file_api_protoblocktx_block_tx_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusWithHeight.ProtoReflect.Descriptor instead.
func (*StatusWithHeight) Descriptor() ([]byte, []int) {
	return file_api_protoblocktx_block_tx_proto_rawDescGZIP(), []int{10}
}

func (x *StatusWithHeight) GetCode() Status {
	if x != nil {
		return x.Code
	}
	return Status_NOT_VALIDATED
}

func (x *StatusWithHeight) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *StatusWithHeight) GetTxNumber() uint32 {
	if x != nil {
		return x.TxNumber
	}
	return 0
}

type NamespacePolicies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policies []*PolicyItem `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
}

func (x *NamespacePolicies) Reset() {
	*x = NamespacePolicies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protoblocktx_block_tx_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespacePolicies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespacePolicies) ProtoMessage() {}

func (x *NamespacePolicies) ProtoReflect() protoreflect.Message {
	mi := &file_api_protoblocktx_block_tx_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespacePolicies.ProtoReflect.Descriptor instead.
func (*NamespacePolicies) Descriptor() ([]byte, []int) {
	return file_api_protoblocktx_block_tx_proto_rawDescGZIP(), []int{11}
}

func (x *NamespacePolicies) GetPolicies() []*PolicyItem {
	if x != nil {
		return x.Policies
	}
	return nil
}

type PolicyItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Policy    []byte `protobuf:"bytes,2,opt,name=policy,proto3" json:"policy,omitempty"`
	Version   uint64 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *PolicyItem) Reset() {
	*x = PolicyItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protoblocktx_block_tx_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyItem) ProtoMessage() {}

func (x *PolicyItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_protoblocktx_block_tx_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyItem.ProtoReflect.Descriptor instead.
func (*PolicyItem) Descriptor() ([]byte, []int) {
	return file_api_protoblocktx_block_tx_proto_rawDescGZIP(), []int{12}
}

func (x *PolicyItem) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *PolicyItem) GetPolicy() []byte {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *PolicyItem) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type ConfigTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Envelope []byte `protobuf:"bytes,1,opt,name=envelope,proto3" json:"envelope,omitempty"`
	Version  uint64 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ConfigTransaction) Reset() {
	*x = ConfigTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_protoblocktx_block_tx_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigTransaction) ProtoMessage() {}

func (x *ConfigTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_api_protoblocktx_block_tx_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigTransaction.ProtoReflect.Descriptor instead.
func (*ConfigTransaction) Descriptor() ([]byte, []int) {
	return file_api_protoblocktx_block_tx_proto_rawDescGZIP(), []int{13}
}

func (x *ConfigTransaction) GetEnvelope() []byte {
	if x != nil {
		return x.Envelope
	}
	return nil
}

func (x *ConfigTransaction) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

var File_api_protoblocktx_block_tx_proto protoreflect.FileDescriptor

var file_api_protoblocktx_block_tx_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x74, 0x78, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x78, 0x22,
	0x6f, 0x0a, 0x02, 0x54, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x78, 0x2e, 0x54, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x22, 0xe6, 0x01, 0x0a, 0x0b, 0x54, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x13, 0x0a, 0x05, 0x6e, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6e, 0x73, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x6f, 0x6e,
	0x6c, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x78, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x09, 0x72, 0x65,
	0x61, 0x64, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x38, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x78, 0x2e, 0x52, 0x65, 0x61, 0x64,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x73, 0x12, 0x36, 0x0a, 0x0c, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x78, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x0b, 0x62, 0x6c,
	0x69, 0x6e, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x73, 0x22, 0x43, 0x0a, 0x04, 0x52, 0x65, 0x61,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5e,
	0x0a, 0x09, 0x52, 0x65, 0x61, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1d, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x2f,
	0x0a, 0x05, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x48, 0x0a, 0x0f, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x23, 0x0a, 0x09, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x52,
	0x0a, 0x12, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x32, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x74, 0x78, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x05,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x22, 0x23, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x78, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x78, 0x49, 0x44, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x78, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x1a, 0x59, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x74, 0x78, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x57, 0x69, 0x74, 0x68, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x7c, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x57, 0x69, 0x74, 0x68, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x78,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x49, 0x0a,
	0x11, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x74, 0x78, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x5c, 0x0a, 0x0a, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x49, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x65,
	0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x2a, 0x9f, 0x04, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x11, 0x0a, 0x0d,
	0x4e, 0x4f, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1c,
	0x0a, 0x18, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x58, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19,
	0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x41,
	0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x4d, 0x56, 0x43, 0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x4c, 0x49, 0x43, 0x54, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x41, 0x4c, 0x46, 0x4f, 0x52,
	0x4d, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f,
	0x54, 0x58, 0x5f, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x64, 0x12, 0x1f, 0x0a, 0x1b,
	0x4d, 0x41, 0x4c, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e,
	0x47, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x65, 0x12, 0x1b, 0x0a,
	0x17, 0x4d, 0x41, 0x4c, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4e, 0x47, 0x5f, 0x54, 0x58, 0x5f, 0x49, 0x44, 0x10, 0x66, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x41,
	0x4c, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54,
	0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x67, 0x12, 0x22, 0x0a,
	0x1e, 0x4d, 0x41, 0x4c, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53,
	0x50, 0x41, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x68, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x41, 0x4c, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x5f, 0x42,
	0x4c, 0x49, 0x4e, 0x44, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x69, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x41, 0x4c,
	0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x53,
	0x10, 0x6a, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x41, 0x4c, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x5f,
	0x45, 0x4d, 0x50, 0x54, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x6b, 0x12, 0x2d, 0x0a, 0x29, 0x4d,
	0x41, 0x4c, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41,
	0x54, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x57,
	0x52, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x6c, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x41,
	0x4c, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x53, 0x10, 0x6d, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x41,
	0x4c, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43,
	0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x6e, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x41, 0x4c, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x58, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x6f, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x66, 0x61,
	0x62, 0x72, 0x69, 0x63, 0x2d, 0x78, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x74,
	0x78, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_protoblocktx_block_tx_proto_rawDescOnce sync.Once
	file_api_protoblocktx_block_tx_proto_rawDescData = file_api_protoblocktx_block_tx_proto_rawDesc
)

func file_api_protoblocktx_block_tx_proto_rawDescGZIP() []byte {
	file_api_protoblocktx_block_tx_proto_rawDescOnce.Do(func() {
		file_api_protoblocktx_block_tx_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_protoblocktx_block_tx_proto_rawDescData)
	})
	return file_api_protoblocktx_block_tx_proto_rawDescData
}

var file_api_protoblocktx_block_tx_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_protoblocktx_block_tx_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_api_protoblocktx_block_tx_proto_goTypes = []interface{}{
	(Status)(0),                // 0: protoblocktx.Status
	(*Tx)(nil),                 // 1: protoblocktx.Tx
	(*TxNamespace)(nil),        // 2: protoblocktx.TxNamespace
	(*Read)(nil),               // 3: protoblocktx.Read
	(*ReadWrite)(nil),          // 4: protoblocktx.ReadWrite
	(*Write)(nil),              // 5: protoblocktx.Write
	(*NamespacePolicy)(nil),    // 6: protoblocktx.NamespacePolicy
	(*BlockInfo)(nil),          // 7: protoblocktx.BlockInfo
	(*LastCommittedBlock)(nil), // 8: protoblocktx.LastCommittedBlock
	(*QueryStatus)(nil),        // 9: protoblocktx.QueryStatus
	(*TransactionsStatus)(nil), // 10: protoblocktx.TransactionsStatus
	(*StatusWithHeight)(nil),   // 11: protoblocktx.StatusWithHeight
	(*NamespacePolicies)(nil),  // 12: protoblocktx.NamespacePolicies
	(*PolicyItem)(nil),         // 13: protoblocktx.PolicyItem
	(*ConfigTransaction)(nil),  // 14: protoblocktx.ConfigTransaction
	nil,                        // 15: protoblocktx.TransactionsStatus.StatusEntry
}
var file_api_protoblocktx_block_tx_proto_depIdxs = []int32{
	2,  // 0: protoblocktx.Tx.namespaces:type_name -> protoblocktx.TxNamespace
	3,  // 1: protoblocktx.TxNamespace.reads_only:type_name -> protoblocktx.Read
	4,  // 2: protoblocktx.TxNamespace.read_writes:type_name -> protoblocktx.ReadWrite
	5,  // 3: protoblocktx.TxNamespace.blind_writes:type_name -> protoblocktx.Write
	7,  // 4: protoblocktx.LastCommittedBlock.block:type_name -> protoblocktx.BlockInfo
	15, // 5: protoblocktx.TransactionsStatus.status:type_name -> protoblocktx.TransactionsStatus.StatusEntry
	0,  // 6: protoblocktx.StatusWithHeight.code:type_name -> protoblocktx.Status
	13, // 7: protoblocktx.NamespacePolicies.policies:type_name -> protoblocktx.PolicyItem
	11, // 8: protoblocktx.TransactionsStatus.StatusEntry.value:type_name -> protoblocktx.StatusWithHeight
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_api_protoblocktx_block_tx_proto_init() }
func file_api_protoblocktx_block_tx_proto_init() {
	if File_api_protoblocktx_block_tx_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_protoblocktx_block_tx_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protoblocktx_block_tx_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxNamespace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protoblocktx_block_tx_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Read); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protoblocktx_block_tx_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadWrite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protoblocktx_block_tx_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Write); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protoblocktx_block_tx_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespacePolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protoblocktx_block_tx_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protoblocktx_block_tx_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastCommittedBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protoblocktx_block_tx_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protoblocktx_block_tx_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionsStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protoblocktx_block_tx_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusWithHeight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protoblocktx_block_tx_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespacePolicies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protoblocktx_block_tx_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_protoblocktx_block_tx_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_protoblocktx_block_tx_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_api_protoblocktx_block_tx_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_api_protoblocktx_block_tx_proto_msgTypes[7].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_protoblocktx_block_tx_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_protoblocktx_block_tx_proto_goTypes,
		DependencyIndexes: file_api_protoblocktx_block_tx_proto_depIdxs,
		EnumInfos:         file_api_protoblocktx_block_tx_proto_enumTypes,
		MessageInfos:      file_api_protoblocktx_block_tx_proto_msgTypes,
	}.Build()
	File_api_protoblocktx_block_tx_proto = out.File
	file_api_protoblocktx_block_tx_proto_rawDesc = nil
	file_api_protoblocktx_block_tx_proto_goTypes = nil
	file_api_protoblocktx_block_tx_proto_depIdxs = nil
}
