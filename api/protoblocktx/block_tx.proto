/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

syntax = "proto3";

option go_package = "github.com/hyperledger/fabric-x-committer/api/protoblocktx";

package protoblocktx;

// Represents a transaction in the blockchain.
message Tx {
    string id = 1; // The transaction ID.
    repeated TxNamespace namespaces = 2; // Namespaces associated with the transaction.
    repeated bytes signatures = 3; // signature per namespace.
}

// Represents a namespace within a transaction.
message TxNamespace {
    string ns_id = 1; // The namespace ID.
    uint64 ns_version = 2; // The version of the namespace.
    repeated Read reads_only = 3; // List of read only operations within the namespace.
    repeated ReadWrite read_writes = 4; // List of read-write operations within the namespace.
    repeated Write blind_writes = 5; // List of blind write operations within the namespace.
}

// Represents a read operation.
message Read {
    bytes key = 1; // The key being read.
    optional uint64 version = 2; // The version of the key being read. Nil version means it doesn't exist.
}

// Represents a read-write operation.
message ReadWrite {
    bytes key = 1; // The key involved in the read-write operation.
    optional uint64 version = 2; // The version of the key being read and written. Nil version means it doesn't exist.
    bytes value = 3; // The value associated with the key being written.
}

// Represents a write operation.
message Write {
    bytes key = 1; // The key being written.
    bytes value = 2; // The value associated with the key being written.
}

// Represents a namespace policy.
message NamespacePolicy {
    string scheme = 1; // The scheme for signature verification.
    bytes public_key = 2; // The public key for signature verification.
}

message BlockInfo {
    uint64 number = 1;
}

message LastCommittedBlock {
    optional BlockInfo block = 1;
}

message QueryStatus {
    repeated string txIDs = 1;
}

message TransactionsStatus {
    map<string, StatusWithHeight> status = 1;
}

message StatusWithHeight {
    Status code = 1;
    uint64 block_number = 2;
    uint32 tx_number = 3;
}

message NamespacePolicies {
    repeated PolicyItem policies = 1;
}

message PolicyItem {
    string namespace = 1;
    bytes policy = 2;
    uint64 version = 3;
}

message ConfigTransaction {
    bytes envelope = 1;
    uint64 version = 2;
}

// Status represents the result of transaction validation.
// Except for NOT_VALIDATED, all statuses are recorded in the ledger.
// Some statuses are also stored in the state database which prevent resubmission of the same transaction ID.
enum Status {
    // Default status. The transaction has not been validated yet.
    NOT_VALIDATED = 0;

    // The transaction was successfully committed and the state was updated.
    // Stored in the state database.
    COMMITTED = 1;

    // Rejected because a transaction with the same ID has already been processed.
    // Not stored in the state database as the entry is already occupied.
    REJECTED_DUPLICATE_TX_ID = 2;

    // Critical abort reasons.
    // Stored in the state database.
    ABORTED_SIGNATURE_INVALID = 3;                      // Signature is invalid according to the namespace policy.
    ABORTED_MVCC_CONFLICT = 4;                          // Read-write set conflict.

    // Malformed transaction reasons. These are rejected during initial verification and not processed further.
    // Not stored in the state database. Transactions with the same ID can be resubmitted if corrected.
    MALFORMED_UNSUPPORTED_TX_PAYLOAD = 100;             // Unsupported transaction payload type.
    MALFORMED_MISSING_SIGNATURE = 101;                  // Number of signatures does not match the number of namespaces.
    MALFORMED_MISSING_TX_ID = 102;                      // Missing transaction ID.
    MALFORMED_DUPLICATE_NAMESPACE = 103;                // Duplicate namespace detected.
    MALFORMED_NAMESPACE_ID_INVALID = 104;               // Invalid namespace identifier.
    MALFORMED_BLIND_WRITES_NOT_ALLOWED = 105;           // Blind writes are not allowed in a namespace transaction.
    MALFORMED_NO_WRITES = 106;                          // No write operations in the transaction.
    MALFORMED_EMPTY_KEY = 107;                          // Unset key detected.
    MALFORMED_DUPLICATE_KEY_IN_READ_WRITE_SET = 108;    // Duplicate key in the read-write set.
    MALFORMED_EMPTY_NAMESPACES = 109;                   // No namespaces provided.
    MALFORMED_NAMESPACE_POLICY_INVALID = 110;           // Invalid namespace policy.
    MALFORMED_CONFIG_TX_INVALID = 111;                  // Invalid configuration transaction.
}
